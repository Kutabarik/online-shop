{"_type":"export","__export_format":4,"__export_date":"2023-05-01T19:28:32.311Z","__export_source":"insomnia.desktop.app:v2023.2.0","resources":[{"_id":"req_83ffd3a4696d4eeeaee15b80df5fea2a","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682968268009,"created":1676911907865,"url":"http://localhost:8000/api/v1/products","name":"Get all users","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1676911973360.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"wrk_ef0cd8ba52094694b41d31e63a187c76","parentId":null,"modified":1682967742999,"created":1676906373618,"name":"online-shop","description":"","scope":"design","_type":"workspace"},{"_id":"req_c48cdf08df054d1a8589eecbfbdfb810","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682669789997,"created":1676906373627,"url":"http://localhost:8000/api/v1/users/2","name":"Get one user","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1676911951448.75,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f9b5410d07d44aaeba5d6831aac381e5","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682763469257,"created":1676912647234,"url":"http://127.0.0.1:8000/api/v1/products?categoryId[eq]=2","name":"Search product","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1676911940492.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b220b67fdb844bc0972b8f1537c71a4d","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682849001483,"created":1682848810300,"url":"http://127.0.0.1:8000/api/v1/users?includeOrders=true","name":"Get users with orders","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1676911937753.9062,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e5645d9489c1467f851b4e46d6b63a7f","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682849036313,"created":1682848967822,"url":"http://127.0.0.1:8000/api/v1/users/5?includeOrders=true","name":"Get one user with order","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1676911936384.4219,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_743371168b7b4b61a00277490617a275","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682955060476,"created":1676911929537,"url":"http://localhost:8000/api/v1/users","name":"Create user","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"name\": \"Egor Afansiev\",\n\t\"email\": \"qwe@gmail.com\",\n\t\"phone\" : \"99-584-62-320\",\n\t\"password\": \"12654654\"\n}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_69dddd2b3cea4252acd631356795ad9d"},{"id":"pair_d53be3f778dc4988ad80486b3ffd7879","name":"Accept","value":"application/json","description":""}],"authentication":{},"metaSortKey":-1676911929537,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ba5ea9d3b381477397931d421c6396af","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682965334789,"created":1682964578751,"url":"http://localhost:8000/api/v1/orders","name":"Create order","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"user_id\": \"12\",\n\t\"city\": \"Moscow\",\n\t\"street\" : \"Lenin 32\",\n\t\"total\": \"228\",\n\t\"status\": \"billed\",\n\t\"billed_date\": \"2020-08-28 17:58:52\"\n}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_69dddd2b3cea4252acd631356795ad9d"},{"id":"pair_d53be3f778dc4988ad80486b3ffd7879","name":"Accept","value":"application/json","description":""}],"authentication":{},"metaSortKey":-1676909151557,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_dd770877a10648d5b0a44ec8e984e8f5","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682965765627,"created":1682965620803,"url":"http://localhost:8000/api/v1/products","name":"Create product","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"category_id\": \"56\",\n\t\"name\": \"Dildo\",\n\t\"description\" : \"Veryy good\",\n\t\"price\": \"269\",\n\t\"img\": \"https://www.youtube.com/watch?v=6TOkxtzXvIE\"\n}\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_69dddd2b3cea4252acd631356795ad9d"},{"id":"pair_d53be3f778dc4988ad80486b3ffd7879","name":"Accept","value":"application/json","description":""}],"authentication":{},"metaSortKey":-1676907762567,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c1b09cc1d5394ca485991c0835b6aab0","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682967524877,"created":1676911985311,"url":"http://localhost:8000/api/v1/users/341","name":"Edit user","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"name\": \"Egor Afansiev Fake\",\n\t\"email\": \"fake@gmail.com\",\n\t\"phone\" : \"88-473-51-21\",\n\t\"password\": \"12654654\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1676906373577,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9402a84c5ed74e53abbbbf7f78d71050","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682968335942,"created":1682968241252,"url":"http://localhost:8000/api/v1/products/1","name":"Edit product","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\t\t\"category_id\": 1,\n\t\t\t\"name\": \"Big dick\",\n\t\t\t\"description\": \"Very interesting book\",\n\t\t\t\"price\": \"666\",\n\t\t\t\"img\": \"https:\\/\\/via.placeholder.com\\/640x480.png\\/007711?text=natus\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1676906373570.75,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d5b987fe70394a20beaa55e56c0ee14f","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682967625224,"created":1682967519965,"url":"http://localhost:8000/api/v1/orders/2","name":"Edit order","description":"","method":"PUT","body":{"mimeType":"application/json","text":"\t{\n\t\t\t\"user_id\": 2,\n\t\t\t\"city\": \"Chisinau\",\n\t\t\t\"street\": \"Pusklina 14\",\n\t\t\t\"total\": \"5421.00\",\n\t\t\t\"status\": \"paid\",\n\t\t\t\"billed_date\": \"2022-10-24 15:19:35\",\n\t\t\t\"paid_date\": \"2016-05-01 20:31:58\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1676906373564.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_11158c04f4b540eb8d8fdf309daf0ab1","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682968399882,"created":1682967121682,"url":"http://localhost:8000/api/v1/users/341","name":"Edit user","description":"","method":"PATCH","body":{"mimeType":"application/json","text":"{\n\t\"name\": \"Ne Egor\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1676906373561.375,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_700b2ddd3af6431cb51df56353ccaa99","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682968396040,"created":1682968356458,"url":"http://localhost:8000/api/v1/products/1","name":"Edit product","description":"","method":"PATCH","body":{"mimeType":"application/json","text":"{\n\t\t\t\"category_id\": 1,\n\t\t\t\"name\": \"Souce\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1676906373555.125,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5feb4e1522984405963b12eaad15867d","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682968401020,"created":1682967641909,"url":"http://localhost:8000/api/v1/orders/2","name":"Edit order","description":"","method":"PATCH","body":{"mimeType":"application/json","text":"\t{\n\t\t\t\"user_id\": 2,\n\t\t\t\"city\": \"Rezina\",\n\t\t\t\"street\": \"Mira 28\",\n\t\t\t\"total\": \"9999.00\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1676906373541.0625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_37fd104bdda8d535e74a4d5ca01e2f4f02cd9691","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1676906373622,"created":1676906373622,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1676906373622,"_type":"environment"},{"_id":"jar_37fd104bdda8d535e74a4d5ca01e2f4f02cd9691","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1676906373624,"created":1676906373624,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_d60246c188064c169ba75c38b553c5a9","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1682967742997,"created":1682967701123,"fileName":"online-shop","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_44b347b543144f41a5952b34657128f8","parentId":"wrk_ef0cd8ba52094694b41d31e63a187c76","modified":1676906373628,"created":1676906373628,"name":"Example Test Suite","_type":"unit_test_suite"}]}